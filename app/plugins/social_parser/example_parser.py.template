# -*- coding: utf-8 -*-
"""
@Time    : YYYY/MM/DD HH:MM
@Author  : Your Name
@GitHub  : https://github.com/your-username
@Desc    : Example social media parser implementation
"""
from typing import List, Dict, Any

import httpx
from loguru import logger
from pydantic import Field

from .base import BaseSocialPost, BaseSocialParser


class ExamplePost(BaseSocialPost):
    """Example social media post model"""
    
    # Define whatever fields your platform provides
    id: str | None = Field(default="")
    title: str | None = Field(default="")
    desc: str | None = Field(default="")
    author_name: str | None = Field(default="")
    author_id: str | None = Field(default="")
    url: str | None = Field(default="")
    created_at: str | None = Field(default="")
    media_urls: List[str] | None = Field(default_factory=list)
    
    # Platform-specific fields (add as needed)
    views_count: int | None = Field(default=0)
    likes_count: int | None = Field(default=0)
    comments_count: int | None = Field(default=0)
    
    @property
    def user_link(self) -> str:
        """Return user profile link"""
        return f"https://example.com/user/{self.author_id}"
    
    @property
    def platform_name(self) -> str:
        """Platform identifier"""
        return "示例平台"
    
    @property
    def resource_list(self) -> List[str]:
        """Return media URLs for download"""
        return self.media_urls or []
    
    @classmethod
    def from_api_response(cls, response_data: dict):
        """Create instance from API response data"""
        return cls(
            id=response_data.get("id", ""),
            title=response_data.get("title", ""),
            desc=response_data.get("description", ""),
            author_name=response_data.get("author_name", ""),
            author_id=response_data.get("author_id", ""),
            url=response_data.get("share_url", ""),
            created_at=response_data.get("created_at", ""),
            media_urls=response_data.get("media_urls", []),
            # Platform-specific fields
            views_count=response_data.get("views", 0),
            likes_count=response_data.get("likes", 0),
            comments_count=response_data.get("comments", 0),
        )


class ExampleParser(BaseSocialParser[ExamplePost]):
    """Example social media content parser"""
    
    # Define the trigger signal to identify this platform's links
    trigger_signal = "https://example.com/"
    platform_id = "example"
    
    def __init__(self):
        super().__init__()
        # Initialize any platform-specific HTTP clients or configurations
        self._client = httpx.AsyncClient(
            base_url="https://api.example.com/v1",
            timeout=30.0,
            headers={
                "User-Agent": "YourBot/1.0",
                "Accept": "application/json",
            }
        )
    
    async def _parse(self, share_link: str, **kwargs) -> ExamplePost | None:
        """
        Parse a share link and return post details
        
        Args:
            share_link: The social media share link
            **kwargs: Additional parameters
            
        Returns:
            ExamplePost object or None if parsing failed
        """
        try:
            # Extract post ID from the share link
            post_id = self._extract_post_id(share_link)
            if not post_id:
                logger.error(f"Could not extract post ID from link: {share_link}")
                return None
            
            # Make API call to get post details
            response = await self._client.get(f"/posts/{post_id}")
            response.raise_for_status()
            
            # Parse response and create post object
            data = response.json()
            return ExamplePost.from_api_response(data)
            
        except Exception as e:
            logger.error(f"Failed to parse {self.platform_id} link {share_link}: {e}")
            return None
    
    def _extract_post_id(self, share_link: str) -> str | None:
        """
        Extract post ID from share link
        
        Args:
            share_link: The share URL
            
        Returns:
            Post ID or None if not found
        """
        # Example: https://example.com/post/123456 -> 123456
        try:
            parts = share_link.split("/")
            if "post" in parts:
                post_index = parts.index("post")
                if post_index + 1 < len(parts):
                    return parts[post_index + 1]
        except Exception as e:
            logger.debug(f"Failed to extract post ID: {e}")
        
        return None
    
    async def __aenter__(self):
        """Async context manager entry"""
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit - cleanup resources"""
        await self._client.aclose()


# Usage example:
"""
To add this parser to your system:

1. Create your actual parser file (e.g., tiktok_parser.py)
2. Implement the ExamplePost and ExampleParser classes with real logic
3. Register the parser in __init__.py:

   from .tiktok_parser import TikTokParser
   
   def _register_parsers():
       parsers = [
           XhsDownloader(),
           TikTokParser(),  # Add your new parser here
       ]
       
       for parser in parsers:
           parser_registry.register(parser)

4. The parser will automatically be available in the /parse command
"""